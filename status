#!/usr/bin/env ruby
def gem_available?(name)
  Gem::Specification.find_by_name(name)
rescue Gem::LoadError
  false
rescue
  Gem.available?(name)
end

color = true
unless gem_available?("colorize")
  puts "[WARNING]: Please install colorize: gem install colorize"
  color = false
else
  require 'colorize'
end
require 'net/http'
require 'uri'


sites = %w{google.com booq.pro railscasts.ru ip.railscasts.ru q3.railscasts.ru ansever.booq.pro yandex.ru}
sites.map!{|s| "http://" + s}

def get_codes(array)
  result = []
  threads = []
  array.each do |url|
    threads << Thread.new do
      uri = URI.parse(url)
      begin
      t1 = Time.now
      resp = Net::HTTP.get_response(uri)
      t2 = Time.now
      code = resp.code
      rescue
      code = "5000"
      end
      time = ((t2-t1)*1000).to_i
      Thread.current["myhash"] = {:site => url, :code => code, :time => time }
      print "."
    end
  end
  threads.each {|t| t.join; result << t["myhash"]} 
  return result
end

print "Processing (#{sites.length} threads) "
sites = get_codes(sites).sort{|x,y| x[:code].to_i <=> y[:code].to_i}
puts " done"

sites.each do |hash|
  code = hash[:code]
  site = hash[:site]
  case
  when code == "200" || code[0] == "3"
    message = "[OK]"
    message = message.colorize( :light_green ) if color
  when code[0] == '5'
    message = "[FAIL]"
    message = message.colorize( :light_red ) if color
    fail = true
  else
    message = "[#{code}]"
    message = message.colorize( :light_yellow ) if color
  end
  site = (fail)? site.colorize( :light_red ) : site.colorize( :white ) if color
  puts "#{message}\t:\t#{site}"
end
